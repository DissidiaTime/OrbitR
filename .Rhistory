#' @examples
get_planet_info("Mars")
#' Get Basic Information about a Planet
#'
#' This function returns simple data about planets in our solar system.
#' @param planet_name The name of the planet.
#' @return A data frame with basic information about the planet.
#' @examples
#' get_planet_info("Mars")
#' @export
get_planet_info <- function(planet_name) {
planets <- data.frame(
Name = c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"),
Moons = c(0, 0, 1, 2, 79, 82, 27, 14),
Orbit_Days = c(88, 224.7, 365.2, 687, 4333, 10759, 30660, 60225)
)
info <- subset(planets, Name == planet_name)
return(info)
}
#' Plot a Simple Circular Orbit
#'
#' This function plots a simple circular orbit to illustrate the concept of orbits.
#' @param radius The radius of the orbit.
#' @examples
#' plot_orbit_simple(1)
#' @export
plot_orbit_simple <- function(radius) {
theta <- seq(0, 2*pi, length.out = 100)
x <- radius * cos(theta)
y <- radius * sin(theta)
plot(x, y, type = 'l', xlab = "X", ylab = "Y",
main = "Simple Circular Orbit")
}
#' Calculate Planet Position Using Kepler's Laws
#'
#' This function calculates the position of a planet based on Kepler's laws of planetary motion.
#' @param semi_major_axis Semi-major axis of the planet's orbit in astronomical units.
#' @param eccentricity Eccentricity of the orbit.
#' @param anomaly Mean anomaly at a specific time in degrees.
#' @return A list with x and y coordinates of the planet in its orbital plane.
#' @examples
#' get_planet_position(1, 0.0167, 0)  # Example for Earth
#' @export
get_planet_position <- function(semi_major_axis, eccentricity, anomaly) {
# Convert anomaly from degrees to radians
M <- anomaly * pi / 180
# Solve Kepler's equation for eccentric anomaly
E <- M
for (i in 1:10) {  # Iterative solution
E <- E - (E - eccentricity * sin(E) - M) / (1 - eccentricity * cos(E))
}
# Calculate the true anomaly
theta <- 2 * atan(sqrt((1 + eccentricity) / (1 - eccentricity)) * tan(E / 2))
# Calculate the distance from the sun
r <- semi_major_axis * (1 - eccentricity * cos(E))
# Convert polar coordinates to Cartesian coordinates
x <- r * cos(theta)
y <- r * sin(theta)
return(list(x = x, y = y))
}
library(testthat)
library(OrbitR)
library(OrbitR)
library(testthat)
library(OrbitR)
test_that("Planet position calculation is correct", {
result <- get_planet_position(1, 0, 0)
expect_equal(result$x, 1)
expect_equal(result$y, 0)
})
library(OrbitR)
# Install roxygen2 if you haven't already
install.packages("roxygen2")
# Load roxygen2
library(roxygen2)
# Set your working directory to the package root
setwd("/path/to/OrbitR")
# Run roxygenize to generate .Rd files and update the NAMESPACE file
roxygenize()
rm(list = c("get_planet_info", "get_planet_position",
"plot_orbit_simple"))
rm(list = c("get_planet_info", "get_planet_position",
"plot_orbit_simple"))
# Run roxygenize to generate .Rd files and update the NAMESPACE file
roxygenize()
# Run roxygenize to generate .Rd files and update the NAMESPACE file
roxygenize()
knitr::opts_chunk$set(echo = TRUE)
library(OrbitR)
